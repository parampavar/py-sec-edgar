[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "py-sec-edgar"
version = "1.2.0"
description = "Python application used to download SEC Edgar filings"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Ryan S. McCoy", email = "github@ryansmccoy.com" },
]
maintainers = [
    { name = "Ryan S. McCoy", email = "github@ryansmccoy.com" },
]
keywords = ["py-sec-edgar", "sec-edgar", "10-K", "financial", "public"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Office/Business :: Financial",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    # Core SEC filing processing
    "beautifulsoup4>=4.12.0",
    "feedparser>=6.0.0",
    "html5lib>=1.1",
    "requests>=2.31.0",
    "lxml>=4.9.0",
    "chardet>=5.0.0",
    "lxml-html-clean>=0.4.2",
    "html2text>=2020.1.16",

    # Data processing
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "pyarrow>=12.0.0",

    # Configuration and validation
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-dotenv>=1.0.0",

    # Async operations
    "aiohttp>=3.9.0",
    "aiofiles>=23.0.0",

    # CLI and UI
    "click>=8.1.0",
    "rich>=13.0.0",

    # AI integration (optional but included for core functionality)
    "openai>=1.0.0",

    # Excel support (commonly needed for SEC data)
    "openpyxl>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "ruff>=0.5.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "tox>=4.11.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/ryansmccoy/py-sec-edgar"
Repository = "https://github.com/ryansmccoy/py-sec-edgar"
Documentation = "https://py-sec-edgar.readthedocs.io"
Issues = "https://github.com/ryansmccoy/py-sec-edgar/issues"

[project.scripts]
py-sec-edgar = "py_sec_edgar.main:cli"

[tool.hatch.build.targets.wheel]
packages = ["src/py_sec_edgar"]
exclude = [
    "src/py_sec_edgar/parse/**",
]

[tool.hatch.build.targets.wheel.force-include]
"refdata" = "py_sec_edgar/refdata"

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E722",  # bare except (legacy code)
    "B904",  # raise without from (legacy code)
    "B007",  # unused loop variables (legacy code)
    "F841",  # unused variables (legacy code)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = false  # Too strict for current codebase
disallow_incomplete_defs = false  # Legacy code compatibility
disallow_untyped_defs = false  # Legacy code compatibility
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false  # Avoid noise from legacy code
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "feedparser.*",
    "beautifulsoup4.*",
    "openpyxl.*",
    "xlrd.*",
    "aiofiles.*",
    "aiohttp.*",
    "pandas.*",
    "numpy.*",
    "openai.*",
    "rich.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=py_sec_edgar",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["py_sec_edgar"]
omit = [
    "tests/*",
    "*/tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

# Advanced parsing and ML dependencies (optional)
# Uncomment and install with: uv sync --group advanced-parsers
# [dependency-groups]
# advanced-parsers = [
#     "beautifulsoup4>=4.13.4",
#     "gensim>=4.3.2",
#     "jinja2>=3.1.6",
#     "matplotlib>=3.9.0",
#     "networkx>=3.4.0",
#     "nltk>=3.9.0",
#     "pillow>=10.0.0",
#     "plotly>=5.17.0",
#     "python-docx>=1.1.0",
#     "pyyaml>=6.0.0",
#     "scikit-learn>=1.4.0",
#     "seaborn>=0.13.0",
#     "sentence-transformers>=2.2.0",
#     "spacy>=3.7.0",
#     "torch>=2.1.0",
#     "tqdm>=4.66.0",
#     "transformers>=4.35.0",
#     "wordcloud>=1.9.0",
# ]

[dependency-groups]
visualization = [
    "matplotlib>=3.9.0",
    "seaborn>=0.13.0",
    "plotly>=5.17.0",
]
dev = [
    "coverage>=7.4.0",
    "pre-commit>=3.6.0",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
]
